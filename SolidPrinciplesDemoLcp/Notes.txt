The Liskov Substitution Principle (LSP) is one of the SOLID principles of object-oriented programming. It states that objects of a superclass should be replaceable with objects of a subclass without affecting the correctness of the program. Essentially, a subclass should override the parent class methods in a way that does not break the functionality from a client's point of view.

Here's a real-world example in C# to illustrate this principle.

Let's start with a base class Bird and then create a couple of subclasses Eagle and Penguin. According to LSP, you should be able to substitute Bird with either Eagle or Penguin without altering the correctness of your program.


Base Class: Bird

public abstract class Bird
{
    public abstract void Fly();
}

Subclass: Eagle

public class Eagle : Bird
{
    public override void Fly()
    {
        Console.WriteLine("Eagle is flying high.");
    }
}

Subclass: Penguin

public class Penguin : Bird
{
    // Penguins cannot fly, so implementing Fly in the same way as Eagle would violate LSP.
    public override void Fly()
    {
        throw new NotImplementedException("Penguins cannot fly.");
    }
}
In the above setup, if a Penguin is substituted for a Bird, it would break the application because calling Fly would throw an exception. This violates the Liskov Substitution Principle.

Corrected Example:
To adhere to LSP, we need to rethink our design. We can introduce a separate interface for flying birds.

Interface: IFlyingBird

public interface IFlyingBird
{
    void Fly();
}

Base Class: Bird

public abstract class Bird
{
    public abstract void Eat();
}
Subclass: Eagle

public class Eagle : Bird, IFlyingBird
{
    public override void Eat()
    {
        Console.WriteLine("Eagle is eating.");
    }

    public void Fly()
    {
        Console.WriteLine("Eagle is flying high.");
    }
}
Subclass: Penguin

public class Penguin : Bird
{
    public override void Eat()
    {
        Console.WriteLine("Penguin is eating.");
    }

    // Penguins do not implement IFlyingBird, as they cannot fly.
}
Client Code
Now, let's see the client code that respects LSP.


public class BirdWatcher
{
    public void ObserveBird(Bird bird)
    {
        bird.Eat();
    }

    public void ObserveFlyingBird(IFlyingBird flyingBird)
    {
        flyingBird.Fly();
    }
}

class Program
{
    static void Main(string[] args)
    {
        BirdWatcher watcher = new BirdWatcher();

        Bird eagle = new Eagle();
        Bird penguin = new Penguin();

        watcher.ObserveBird(eagle);    // Output: Eagle is eating.
        watcher.ObserveBird(penguin);  // Output: Penguin is eating.

        IFlyingBird flyingEagle = new Eagle();
        watcher.ObserveFlyingBird(flyingEagle);  // Output: Eagle is flying high.
        
        // watcher.ObserveFlyingBird(penguin);  // This will not compile, preserving LSP
    }
}
In this revised design:

Bird class has only methods common to all birds.
IFlyingBird interface is implemented by birds that can fly.
The client code (e.g., BirdWatcher) treats Eagle and Penguin appropriately based on their abilities.
By ensuring that Penguin does not have a Fly method and instead focusing on what each subclass can do correctly, we adhere to the Liskov Substitution Principle.

